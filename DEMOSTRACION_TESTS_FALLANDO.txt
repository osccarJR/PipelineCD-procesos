================================================================================
DEMOSTRACI√ìN: TESTS FALLANDO
================================================================================

üìå ¬øQU√â HICIMOS?
--------------------------------------------------------------------------------

Modificamos INTENCIONALMENTE 3 tests para que fallen y as√≠ demostrar:

1. ‚úÖ C√≥mo se ven los tests cuando fallan
2. ‚úÖ C√≥mo pytest reporta los errores
3. ‚úÖ C√≥mo identificar y corregir las fallas
4. ‚úÖ El valor de tener tests automatizados


üìå TESTS MODIFICADOS (3 FALLAS INTENCIONALES)
--------------------------------------------------------------------------------

FALLA #1: test_create_valid_task
   Archivo: tests/test_task.py
   L√≠nea: 22
   Error: Esperaba TaskPriority.HIGH pero obtiene TaskPriority.MEDIUM

FALLA #2: test_update_title
   Archivo: tests/test_task.py
   L√≠nea: 126
   Error: Esperaba "Wrong Title" pero obtiene "Updated Title"

FALLA #3: test_get_statistics_with_tasks
   Archivo: tests/test_task_manager.py
   L√≠nea: 321
   Error: Esperaba 75.0% pero obtiene 50.0%


üìå RESULTADO ACTUAL
--------------------------------------------------------------------------------

Al ejecutar: pytest

Resultado:
   ‚úÖ 58 tests PASARON
   ‚ùå 3 tests FALLARON
   üìä Tasa de √©xito: 95.08%
   ‚è±Ô∏è Tiempo: 0.47 segundos
   üìà Cobertura: 98.96% (se mantiene)


üìå SALIDA DE PYTEST (SIMPLIFICADA)
--------------------------------------------------------------------------------

$ pytest -v

tests/test_task.py::test_create_valid_task FAILED                  [  1%]
tests/test_task.py::test_update_title FAILED                       [ 26%]
tests/test_task_manager.py::test_get_statistics_with_tasks FAILED  [ 95%]

================================== FAILURES ===================================

___________________ TestTaskCreation.test_create_valid_task ___________________
AssertionError: assert <TaskPriority.MEDIUM: 2> == <TaskPriority.HIGH: 3>

______________________ TestTaskUpdates.test_update_title ______________________
AssertionError: assert 'Updated Title' == 'Wrong Title'

________________ TestStatistics.test_get_statistics_with_tasks ________________
AssertionError: assert 50.0 == 75.0

======================== 3 failed, 58 passed in 0.47s =========================


üìå ¬øPOR QU√â ES √öTIL ESTA DEMOSTRACI√ìN?
--------------------------------------------------------------------------------

1. DETECCI√ìN TEMPRANA DE ERRORES
   - Los tests encuentran problemas ANTES de producci√≥n
   - Son m√°s baratos de arreglar en desarrollo

2. MENSAJES CLAROS
   - pytest muestra EXACTAMENTE qu√© fall√≥
   - Indica el archivo y la l√≠nea
   - Muestra valores esperados vs. valores reales

3. REGRESI√ìN
   - Si alguien rompe el c√≥digo en el futuro
   - Los tests lo detectar√°n inmediatamente

4. DOCUMENTACI√ìN VIVA
   - Los tests muestran c√≥mo DEBE funcionar el c√≥digo
   - Son ejemplos ejecutables


üìå EJEMPLO DE ERROR DETALLADO
--------------------------------------------------------------------------------

Test: test_get_statistics_with_tasks
Ubicaci√≥n: tests/test_task_manager.py:321

C√≥digo:
   assert stats["completion_rate"] == 75.0  # ‚ùå FALLA

Error:
   AssertionError: assert 50.0 == 75.0
                        ^^^^^    ^^^^^
                        Real   Esperado

Contexto:
   - 4 tareas creadas
   - 2 tareas completadas
   - Tasa real: 2/4 = 50% ‚úÖ CORRECTO
   - Test esperaba: 75% ‚ùå INCORRECTO


üìå C√ìMO LEER LOS ERRORES DE PYTEST
--------------------------------------------------------------------------------

Estructura de un error:

1. NOMBRE DEL TEST
   TestTaskCreation.test_create_valid_task

2. UBICACI√ìN
   tests/test_task.py:22

3. TIPO DE ERROR
   AssertionError

4. DETALLES
   assert <valor_real> == <valor_esperado>

5. CONTEXTO ADICIONAL
   - Valores de las variables
   - L√≠neas de c√≥digo relevantes


üìå ARCHIVOS CREADOS PARA LA DEMOSTRACI√ìN
--------------------------------------------------------------------------------

1. EJEMPLO_TESTS_FALLANDO.md
   - Explicaci√≥n completa de cada falla
   - C√≥mo interpretar los errores
   - Tipos de errores comunes

2. COMO_ARREGLAR_TESTS.md
   - Instrucciones paso a paso para arreglar
   - 3 m√©todos diferentes de correcci√≥n
   - Verificaci√≥n final

3. DEMOSTRACION_TESTS_FALLANDO.txt
   - Este archivo (resumen ejecutivo)


üìå PARA ARREGLAR LOS TESTS
--------------------------------------------------------------------------------

OPCI√ìN 1 - R√ÅPIDA:
   Lee el archivo: COMO_ARREGLAR_TESTS.md
   Sigue las instrucciones paso a paso

OPCI√ìN 2 - MANUAL:
   1. Abre tests/test_task.py
   2. Busca "FALLA INTENCIONAL"
   3. Corrige las 2 l√≠neas marcadas
   4. Abre tests/test_task_manager.py
   5. Busca "FALLA INTENCIONAL"
   6. Corrige la l√≠nea marcada
   7. Ejecuta: pytest

OPCI√ìN 3 - REVERTIR:
   Si tienes Git configurado:
   git checkout tests/test_task.py tests/test_task_manager.py


üìå COMANDOS √öTILES
--------------------------------------------------------------------------------

# Ver tests fallidos
pytest

# Ver con m√°s detalle
pytest -v

# Ver solo las fallas
pytest --tb=short

# Detener en la primera falla
pytest -x

# Ejecutar solo un test espec√≠fico
pytest tests/test_task.py::TestTaskCreation::test_create_valid_task

# Ver cobertura
pytest --cov=src


üìå LECCIONES APRENDIDAS
--------------------------------------------------------------------------------

‚úÖ Los tests automatizados son ESENCIALES para calidad de c√≥digo
‚úÖ pytest proporciona retroalimentaci√≥n clara y √∫til
‚úÖ Es mejor detectar errores en desarrollo que en producci√≥n
‚úÖ Los tests deben pasar al 100% antes de hacer commit
‚úÖ La cobertura de c√≥digo NO garantiza ausencia de bugs


üìå EN UN PROYECTO REAL
--------------------------------------------------------------------------------

NUNCA DEBES:
   ‚ùå Hacer commit con tests fallando
   ‚ùå Ignorar las fallas de tests
   ‚ùå Comentar tests que fallan
   ‚ùå Desactivar tests "molestos"

SIEMPRE DEBES:
   ‚úÖ Investigar por qu√© falla un test
   ‚úÖ Corregir el c√≥digo O el test (seg√∫n corresponda)
   ‚úÖ Mantener los tests actualizados
   ‚úÖ Agregar tests para bugs encontrados


üìå ESTAD√çSTICAS
--------------------------------------------------------------------------------

ESTADO ACTUAL (CON FALLAS):
   Total de tests: 61
   Pasaron: 58 (95.08%)
   Fallaron: 3 (4.92%)
   Cobertura: 98.96%

ESTADO ORIGINAL (SIN FALLAS):
   Total de tests: 61
   Pasaron: 61 (100%)
   Fallaron: 0 (0%)
   Cobertura: 98.96%


üìå SIGUIENTE PASO
--------------------------------------------------------------------------------

Para restaurar el proyecto a su estado perfecto:

1. Lee: COMO_ARREGLAR_TESTS.md
2. Corrige los 3 tests
3. Ejecuta: pytest
4. Verifica: 61 passed in X.XXs

¬°Y tendr√°s nuevamente un proyecto perfecto! ‚úÖ


================================================================================
FIN DE LA DEMOSTRACI√ìN
================================================================================

Para m√°s informaci√≥n:
   - EJEMPLO_TESTS_FALLANDO.md     (explicaci√≥n detallada)
   - COMO_ARREGLAR_TESTS.md        (instrucciones de correcci√≥n)
   - RESUMEN_ESPA√ëOL.md            (documentaci√≥n completa del proyecto)

================================================================================
